module categories where

open import Level public
  renaming (_⊔_ to _⊎_ ; zero to ℓ₀ ; suc to ℓsuc)

data _≡_ {ℓ : Level} {A : Set ℓ} : A → A → Set where
  refl : (x : A) → x ≡ x

symm : {ℓ : Level} {A : Set ℓ} {x : A} {y : A} → (x ≡ y) → (y ≡ x)
symm (refl x) = refl x

trans : {ℓ : Level} {A : Set ℓ} {x : A} {y : A} {z : A} → (x ≡ y) → (y ≡ z) → (x ≡ z)
trans {ℓ} {A} {.x} {.x} {.x} (refl .x) (refl x) = refl x

app : {ℓ : Level} {A : Set ℓ} {B : Set ℓ} {x : A} {y : A} (f : A → B) → (x ≡ y) → ((f x) ≡ (f y))
app f (refl z) = refl (f z)

-- Dependent pair type

record Σ (A : Set) (B : A → Set) : Set where
  constructor _,_
  field
    projl : A
    projr : B projl

-- Categories and functors

record Category {ℓ : Level} : Set (ℓsuc ℓ) where
  field
    objects : Set ℓ
    morphisms : objects → objects → Set
    _∘_ : {A : objects} → {B : objects} → {C : objects} → morphisms B C → morphisms A B → morphisms A C
    id : {A : objects} → morphisms A A
    assoc : {A : objects} → {B : objects} → {C : objects} → {D : objects} → (f : morphisms A B) → (g : morphisms B C) → (h : morphisms C D) → ((h ∘ g) ∘ f) ≡ (h ∘ (g ∘ f))
    leftId : {A : objects} → {B : objects} → (f : morphisms A B) → (id ∘ f) ≡ f
    rightId : {A : objects} → {B : objects} → (f : morphisms A B) → (f ∘ id) ≡ f

Ob : Category → Set
Ob 𝒞 = Category.objects 𝒞

Mor : {𝒞 : Category} → Ob 𝒞 → Ob 𝒞 → Set
Mor {𝒞} A B = Category.morphisms 𝒞 A B

id : {𝒞 : Category} → (A : Ob 𝒞) → Mor {𝒞} A A
id {𝒞} A = Category.id 𝒞 {A}

_∘_ : {𝒞 : Category} {A : Ob 𝒞} {B : Ob 𝒞} {C : Ob 𝒞} → Mor {𝒞} B C → Mor {𝒞} A B → Mor {𝒞} A C
_∘_ {𝒞} g f = Category._∘_ 𝒞 g f

record Functor (𝒞 𝒟 : Category) : Set where
  field
    onObjects : Category.objects 𝒞 → Category.objects 𝒟
    onMorphisms : {A : Category.objects 𝒞} → {B : Category.objects 𝒞} → (Category.morphisms 𝒞 A B) → (Category.morphisms 𝒟 (onObjects A) (onObjects B))
    respectsComposition : {A : Category.objects 𝒞} → {B : Category.objects 𝒞} → {C : Category.objects 𝒞} → (f : Category.morphisms 𝒞 A B) → (g : Category.morphisms 𝒞 B C) → (onMorphisms (Category._∘_ 𝒞 g f)) ≡ (Category._∘_ 𝒟 (onMorphisms g) (onMorphisms f))
    respectsIdentity : {A : Category.objects 𝒞} → (onMorphisms (Category.id 𝒞 {A})) ≡ (Category.id 𝒟 {onObjects A}) 

_●_ : {𝒞 : Category} → {𝒟 : Category} → {𝒦 : Category} → Functor 𝒟 𝒦 → Functor 𝒞 𝒟 → Functor 𝒞 𝒦
𝒯 ● 𝒮 = record { onObjects = λ A → (Functor.onObjects 𝒯) (Functor.onObjects 𝒮 A) ; onMorphisms = λ f → (Functor.onMorphisms 𝒯) (Functor.onMorphisms 𝒮 f) ; respectsComposition = λ f → λ g → trans (app (Functor.onMorphisms 𝒯) (Functor.respectsComposition 𝒮 f g)) (Functor.respectsComposition 𝒯 (Functor.onMorphisms 𝒮 f) (Functor.onMorphisms 𝒮 g)) ; respectsIdentity = trans (app (Functor.onMorphisms 𝒯) (Functor.respectsIdentity 𝒮)) (Functor.respectsIdentity 𝒯) }

-- Arrow categories

record Arrow (𝒞 : Category) : Set where
  field
    left : Ob 𝒞
    right : Ob 𝒞
    arrow : Mor {𝒞} left right

left : {𝒞 : Category} → (↗ : Arrow 𝒞) → Ob 𝒞
left ↗ = Arrow.left ↗

right : {𝒞 : Category} → (↗ : Arrow 𝒞) → Ob 𝒞
right ↗ = Arrow.right ↗

arrow : {𝒞 : Category} → (↗ : Arrow 𝒞) → Mor {𝒞} (left ↗) (right ↗)
arrow ↗ = Arrow.arrow ↗

record CommutativeSquare (𝒞 : Category) : Set where
  field
    NW : Ob 𝒞
    NE : Ob 𝒞
    SW : Ob 𝒞
    SE : Ob 𝒞
    north : Mor {𝒞} NW NE
    west : Mor {𝒞} NW SW
    east : Mor {𝒞} NE SE
    south : Mor {𝒞} SW SE
    comm : _∘_ {𝒞} east north ≡ _∘_ {𝒞} south west

NW : {𝒞 : Category} → (□ : CommutativeSquare 𝒞) -> Ob 𝒞
NW □ = CommutativeSquare.NW □

NE : {𝒞 : Category} → (□  : CommutativeSquare 𝒞) -> Ob 𝒞
NE □ = CommutativeSquare.NE □

SW : {𝒞 : Category} → (□  : CommutativeSquare 𝒞) -> Ob 𝒞
SW □ = CommutativeSquare.SW □

SE : {𝒞 : Category} → (□  : CommutativeSquare 𝒞) -> Ob 𝒞
SE □ = CommutativeSquare.SE □

north : {𝒞 : Category} → (□ : CommutativeSquare 𝒞) -> Mor {𝒞} (NW □) (NE □)
north □ = CommutativeSquare.north □

west : {𝒞 : Category} → (□ : CommutativeSquare 𝒞) -> Mor {𝒞} (NW □) (SW □)
west □ = CommutativeSquare.west □

east : {𝒞 : Category} → (□ : CommutativeSquare 𝒞) -> Mor {𝒞} (NE □) (SE □)
east □ = CommutativeSquare.east □

south : {𝒞 : Category} → (□ : CommutativeSquare 𝒞) -> Mor {𝒞} (SW □) (SE □)
south □ = CommutativeSquare.south □

topArrow : {𝒞 : Category} → CommutativeSquare 𝒞 → Arrow 𝒞
topArrow □ = record { left = NW □ ; right = NE □ ; arrow = north □ }

bottomArrow : {𝒞 : Category} → CommutativeSquare 𝒞 → Arrow 𝒞
bottomArrow □ = record { left = SW □ ; right = SE □ ; arrow = south □ }

_∷_ : {𝒞 : Category} → (□ : CommutativeSquare 𝒞) → (■ : CommutativeSquare 𝒞) -> (south □) ≡ (north ■) -> CommutativeSquare 𝒞
_∷_ {𝒞} □ ■ P = record{ NW = NW □ ; NE = NE □ ; SW = SW ■ ; SE = SE ■ ; north = north □ ; west = _∘_ {𝒞} (west ■) (west □) ; east = _∘_ {𝒞} (east ■) (east □) ; south = south ■ ; comm = trans (trans (trans (trans (trans (Category.assoc 𝒞 (north □) (east □) (east ■)) (app (λ f → _∘_ {𝒞} (east ■) f) (CommutativeSquare.comm □))) (Category.assoc 𝒞 (west □) (south □) (east ■))) (app (λ f → _∘_ {𝒞} (_∘_ {𝒞} (east ■) f) (west □)) P)) (app (λ f → (_∘_ {𝒞} f (west □))) (CommutativeSquare.comm ■))) (Category.assoc 𝒞 (west □) (west ■) (south ■)) }

-- The category of sets

CategoryOfSets : Category {ℓsuc ℓ₀}
CategoryOfSets = record {objects = Set ; morphisms = λ A → λ B → (A → B) ; _∘_ = λ g → λ f → λ x → g (f x) ; id = λ x → x ; assoc = λ f → λ g → λ h → refl (λ x → h (g (f x))) ; leftId = λ f → refl f ; rightId = λ f → refl f }
  
-- An example poset category

data ℕ : Set where
  zero : ℕ
  succ : ℕ → ℕ

_+_ : ℕ → ℕ → ℕ
zero + n = n
(succ M) + n = succ(M + n)

ℕasc : (l : ℕ) → (m : ℕ) → (n : ℕ) → ((l + m) + n) ≡ (l + (m + n))
ℕasc zero m n = refl (m + n)
ℕasc (succ L) m n = app succ (ℕasc L m n)

ℕunitL : (n : ℕ) → (zero + n) ≡ n
ℕunitL n = refl n

ℕunitR : (n : ℕ) → (n + zero) ≡ n
ℕunitR zero = refl zero
ℕunitR (succ N) = app succ (ℕunitR N)

data _≤_ : ℕ → ℕ → Set where
  zer : {n : ℕ} → zero ≤ n
  inc : {m : ℕ} → {n : ℕ} → (m ≤ n) → (succ m ≤ succ n)

ref : {n : ℕ} → n ≤ n
ref {zero} = zer
ref {succ n} = inc (ref {n})

tra : {l : ℕ} → {m : ℕ} → {n : ℕ} → l ≤ m → m ≤ n → l ≤ n
tra zer Q = zer
tra (inc P) (inc Q) = inc (tra P Q)

unq : {m : ℕ} → {n : ℕ} → (P : m ≤ n) → (Q : m ≤ n) → (P ≡ Q)
unq zer zer = refl zer
unq (inc P) (inc Q) = app inc (unq P Q)

Categoryℕ : Category {ℓ₀}
Categoryℕ = record { objects = ℕ ; morphisms = λ m → λ n → (m ≤ n) ; _∘_ = λ Q → λ P → tra P Q ; id = ref ; assoc = λ P → λ Q → λ R → unq (tra P (tra Q R)) (tra (tra P Q) R) ; leftId = λ P → unq (tra P ref) P ; rightId = λ P → unq (tra ref P) P }

-- A monoid as a category

record Monoid : Set₁ where
  field
    carrier : Set
    _✶_ : carrier → carrier → carrier
    e : carrier
    assoc : (x : carrier) → (y : carrier) → (z : carrier) → ((x ✶ y) ✶ z) ≡ (x ✶ (y ✶ z))
    idL : (x : carrier) → (e ✶ x) ≡ x
    idR : (y : carrier) → (y ✶ e) ≡ y

data Point : Set where
  ⋆ : Point

MonoidAsCategory : Monoid → Category {ℓ₀}
MonoidAsCategory M = record { objects = Point ; morphisms = λ ⋆ → λ ⋆ → Monoid.carrier M ; _∘_ = λ x → λ y → (Monoid._✶_ M) x  y ; id = Monoid.e M ; assoc = λ x → λ y → λ z → Monoid.assoc M z y x ; leftId = Monoid.idL M ; rightId = Monoid.idR M }

-- And a silly example

ℕAsMonoid : Monoid
ℕAsMonoid = record { carrier = ℕ ; _✶_ = λ m → λ n → m + n ; e = zero ; assoc = ℕasc ; idL = ℕunitL ; idR = ℕunitR }

ℕAsMonoidAsCategory : Category {ℓ₀}
ℕAsMonoidAsCategory = MonoidAsCategory ℕAsMonoid
