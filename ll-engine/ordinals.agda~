module ordinals where

-- Natural numbers
data ℕ : Set where
  zero : ℕ
  succ : ℕ -> ℕ

-- General purpose ordinal type
Ordinal : Set -> Set
Ordinal X = X -> ((X -> X) -> (((ℕ -> X) -> X) -> X))

zer : {X : Set} -> Ordinal X
zer z s l = z

suc : {X : Set} -> (Ordinal X -> Ordinal X)
suc a z s l = s(a z s l)

lim : {X : Set} -> (ℕ -> Ordinal X) -> Ordinal X
lim f z s l = l (λ n -> (f n) z s l)

FiniteOrdinal : {X : Set} -> ℕ -> Ordinal X
FiniteOrdinal zero = zer
FiniteOrdinal (succ n) = suc(FiniteOrdinal n)

ω : {X : Set} -> Ordinal X
ω = lim (FiniteOrdinal)

ωM+N : {X : Set} -> (ℕ -> (ℕ -> Ordinal X))
ωM+N zero zero = zer
ωM+N m (succ N) = suc(ωM+N m N)
ωM+N (succ M) zero = lim(ωM+N M)

ω² : {X : Set} -> Ordinal X
ω² = lim(λ m -> ωM+N m zero)

-- Higher recursive types
Ordinal' : Set -> Set
Ordinal' X = Ordinal(X -> X)
